import logging
from datetime import datetime

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, \
    ConversationHandler

from func import select_all_lessons, select_all_admins, select_all_main_admins, add_new_admin, add_new_homework, \
    bot_token

# Enable logging
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
# set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# Stages
START, CHOOSE_SUBJECT, CHOOSE_DATE, ENTER_TASK, CONFIRMATION, REQUEST_ACCESS = range(6)

temp_user_data = {}


def is_admin(user_id):
    if str(user_id) in [el[0] for el in select_all_admins()]:
        return True
    return False


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    if is_admin(user_id):
        keyboard = [
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –î–ó", callback_data="add_homework")],
        ]
    else:
        keyboard = [
            [InlineKeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="request_access")],
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return START


async def add_homework(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    buttons = [[InlineKeyboardButton(f'{el[2]}   {el[1]}', callback_data=str(el[:2]))] for el in
               sorted(select_all_lessons(), key=lambda x: x[1])]
    print(buttons)
    query = update.callback_query
    await query.answer()
    reply_markup = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=reply_markup)
    return CHOOSE_SUBJECT


async def choose_subject(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ç–µ–∂ –∏–∑ —Å—Ç—Ä–æ–∫–∏ callback_data
    print('eval(query.data)', eval(query.data))
    subject_id, subject_name = eval(
        query.data)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º eval –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–æ—Ä—Ç–µ–∂
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –ø—Ä–µ–¥–º–µ—Ç–∞
    context.user_data['subject_id'] = subject_id
    context.user_data['subject_name'] = subject_name
    #context.user_data['lesson_ico'] = lesson_ico
    await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
    return CHOOSE_DATE


def validate_date(date_str):
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        date_obj = datetime.strptime(date_str.replace(".", "").replace("-", ""), "%d%m%Y")
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        return date_obj.strftime("%Y-%m-%d")
    except ValueError:
        return None


async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    date_str = update.message.text
    valid_date = validate_date(date_str)
    if valid_date:
        context.user_data['date'] = valid_date
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")
        return ENTER_TASK
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return CHOOSE_DATE


async def enter_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    task = update.message.text
    context.user_data['task'] = task
    data = f"–ü—Ä–µ–¥–º–µ—Ç: {context.user_data['subject_name']}\n–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {context.user_data['date']}\n–ó–∞–¥–∞–Ω–∏–µ: {task}"
    keyboard = [
        [
            InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
            InlineKeyboardButton(text="–ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="edit"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n{data}", reply_markup=reply_markup)
    return CONFIRMATION


async def confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == "confirm":
        # Get current date
        date_on = datetime.now().strftime("%Y-%m-%d")
        # Get author's username
        author = update.effective_user.username
        # Save homework with additional data
        data = {
            "lessons": context.user_data['subject_name'],
            "lessons_id": context.user_data['subject_id'],
            "date_off": context.user_data['date'],
            "homework": context.user_data['task'],
            "date_on": date_on,
            "author": author,
        }

        if add_new_homework(date_on, data["date_off"], data["lessons_id"], data["homework"], author):
            await query.edit_message_text(text="–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
            return ConversationHandler.END
        else:
            await query.edit_message_text(text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END
    else:
        # Start over from choosing subject
        return await add_homework(update, context)


async def request_access(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    keyboard = [
        [
            KeyboardButton(
                text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
                request_contact=True,
            )
        ]
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await context.bot.send_message(  # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_id=user_id,
        text="–î–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º':",
        reply_markup=reply_markup,
    )

    return REQUEST_ACCESS


async def send_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    global temp_user_data  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    contact = update.effective_message.contact  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
    user = update.effective_user  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user_id = contact.user_id
    first_name = contact.first_name
    last_name = contact.last_name or ""
    full_name = f"{first_name} {last_name}".strip()
    username = user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"  # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ user
    phone_number = contact.phone_number or "–Ω–µ —É–∫–∞–∑–∞–Ω"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ context.user_data
    context.user_data['user_id'] = user_id
    context.user_data['full_name'] = full_name
    context.user_data['username'] = username
    context.user_data['phone_number'] = phone_number

    print(context.user_data)
    temp_user_data = context.user_data

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"approve_admin:{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}"),
        ],
        [InlineKeyboardButton("üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data=f"approve_main_admin:{user_id}")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    for admin_id in [int(el[0]) for el in select_all_main_admins()]:
        await context.bot.send_message(
            chat_id=admin_id,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} (ID: {user_id}) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø. Username: @{username}, {full_name} –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}",
            reply_markup=reply_markup,
        )
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
    # await update.effective_message.edit_reply_markup(reply_markup=None)

    await update.effective_message.reply_text("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    return ConversationHandler.END


async def handle_admin_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global temp_user_data  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    query = update.callback_query
    await query.answer()
    action, user_id = query.data.split(":")
    user_data = temp_user_data
    user_id = user_data['user_id']
    user_name = user_data['full_name']
    username = user_data['username']
    phone_number = user_data['phone_number']

    if action == "approve_admin":
        if add_new_admin(user_id, 0, phone_number, username, user_name):
            await query.edit_message_text(
                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω:\nNick: @{username}\n–§–ò–û: {user_name}\n—Ç–µ–ª.: {phone_number}")
            await context.bot.send_message(chat_id=user_id,
                                           text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.")
        else:
            await query.edit_message_text(
                text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ß—Ç–æ-—Ç–æ —Å –ë–î.:\nNick: @{username}\n–§–ò–û: {user_name}\n—Ç–µ–ª.: {phone_number}")
            await context.bot.send_message(chat_id=user_id, text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
    elif action == "reject":
        keyboard = [
            [
                InlineKeyboardButton("–î–∞", callback_data=f"notify_reject:{user_id}"),
                InlineKeyboardButton("–ù–µ—Ç", callback_data="do_not_notify"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=f"–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –æ—Ç {user_name}? –û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?", reply_markup=reply_markup
        )
    elif action == "approve_main_admin":
        keyboard = [
            [
                InlineKeyboardButton("–î–∞", callback_data=f"confirm_main_admin:{user_id}"),
                InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_main_admin"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å {user_name} –∞–¥–º–∏–Ω–æ–º?",
                                      reply_markup=reply_markup)
    elif action == "notify_reject":
        await query.edit_message_text(text=f"–ó–∞–ø—Ä–æ—Å –æ—Ç {user_name} –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
        await context.bot.send_message(chat_id=user_id, text="–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
    elif action == "confirm_main_admin":
        if add_new_admin(user_id, 1, phone_number, username, user_name):
            await query.edit_message_text(text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω.")
            await context.bot.send_message(chat_id=user_id, text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω.")
        else:
            await query.edit_message_text(text=f" –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}\n–ß—Ç–æ-—Ç–æ —Å –ë–î.")
            await context.bot.send_message(chat_id=user_id, text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
    else:
        await query.edit_message_text(text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


def main() -> None:
    application = Application.builder().token(bot_token()).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            START: [
                CallbackQueryHandler(add_homework, pattern="^add_homework$"),
                CallbackQueryHandler(request_access, pattern="^request_access$"),
            ],
            CHOOSE_SUBJECT: [
                CallbackQueryHandler(choose_subject),
            ],
            CHOOSE_DATE: [
                MessageHandler(filters=filters.TEXT, callback=choose_date),
            ],
            ENTER_TASK: [
                MessageHandler(filters=filters.TEXT, callback=enter_task),
            ],
            CONFIRMATION: [
                CallbackQueryHandler(confirmation, pattern="^(confirm|edit)$"),
            ],
            REQUEST_ACCESS: [
                CallbackQueryHandler(send_contact, pattern="^send_contact$"),
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(conv_handler),
    application.add_handler(MessageHandler(filters=filters.CONTACT, callback=send_contact)),
    application.add_handler(CallbackQueryHandler(handle_admin_request,
                                                 pattern="^(approve_admin|reject|approve_main_admin|notify_reject|confirm_main_admin).*"))
    application.run_polling()


if __name__ == "__main__":
    main()
